/* Begin Guitar Hero LP Controller Styling */

.controller.custom {
	/* Base background image of guitar */
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Guitar.png);
	height: 250px;
	width: 741px;
}

.custom .disconnected {
	/* Image for disconnected Guitar */
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Guitar_Disconnected.png);
	height: 250px;
	width: 741px;
}

/* This hides the controller's button when disconnected so only the background image remains */ 
.custom.disconnected div {
    display: none;
}

/* Fret Setup - XInput/360 A Green, B Red, Yellow Y, Blue X, Orange Left Bumper */

.custom .a{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret1.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 600px;
}

.custom .a.pressed{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret1h.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 600px;
}

.custom .b{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret2.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 575px;
}

.custom .b.pressed{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret2h.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 575px;
}

.custom .y{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret3.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 550px;
}

.custom .y.pressed{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret3h.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 550px;
}

.custom .x{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret4.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 525px;
}

.custom .x.pressed{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret4h.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 525px;
}

.custom .bumper.left{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret5.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 500px;
}

.custom .bumper.left.pressed{
    background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Fret5h.png);
    height: 27px;
    width: 18px;
    display: block;
    position: absolute;
    top: 112px;
    left: 500px;
}

/* Strum Setup - DPad Up/Down */

.custom .face.up {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/StrumUp.png);
	height: 16px;
	width:  65px;
	display: block;
    position: absolute;
    top: 110px;
    left: 140px;

}

.custom .face.up.pressed {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/StrumUph.png);
	height: 16px;
	width:  65px;
	display: block;
    position: absolute;
    top: 110px;
    left: 140px;

}

.custom .face.down {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/StrumDown.png);
	height: 16px;
	width:  65px;
	display: block;
    position: absolute;
    top: 127px;
    left: 140px;

}

.custom .face.down.pressed {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/StrumDownh.png);
	height: 16px;
	width:  65px;
	display: block;
    position: absolute;
    top: 127px;
    left: 140px;

}


/* Start & Select/Back Buttons */

.custom .start {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Start.png);
	height: 23px;
	width: 22px;
	display: block;
	position: absolute;
	top: 145px;
	left: 34px;
}

.custom .start.pressed {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Starth.png);
	height: 23px;
	width: 22px;
	display: block;
	position: absolute;
	top: 145px;
	left: 34px;
}

.custom .back {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Select.png);
	height: 20px;
	width: 19px;
	display: block;
	position: absolute;
	top: 131px;
	left: 58px;
}

.custom .back.pressed {
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Selecth.png);
	height: 20px;
	width: 19px;
	display: block;
	position: absolute;
	top: 131px;
	left: 58px;
}

/* Whammy mapped to Right Bumper and Right Bumper Pressed to indicate perfect whammying, more on this below. */

.custom .bumper.right{
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Whammy.png);
	display: block;
	position: fixed;
	height: 8px;
	width: 92px;
	top: 183px;
	left: 78px;
}

.custom .bumper.right.pressed{
	background: url(https://exemplaryme.github.io/GPV_Skins/guitarskin/Whammyh.png);
	display: block;
	position: fixed;
	height: 8px;
	width: 92px;
	top: 183px;
	left: 78px;
}

/* 

Note: I only have Wiitars.

Since Wiitars get tilt and whammy from Wiimote, and we only get full support for Wiimotes using WiitarThing, Gamepadviewer DOES detect Whammy so moving the whammy up and down moves the right stick horizontal axis. When tilting we also have access to vertical axis. I don't know enough CSS or JS to do something fancy here with just Whammy.png and stick mapping, so button map it is.

Here is a screenwhat of my GPV mappings for this:
https://imgur.com/ohwnjYf.png


We set Fix Type Trigger 0 to 1, set lowest value as whammy's natural position. Click to set the value, bring the whammy down, and then let go. After 3 seconds GPV should set the value. Click to set the highest value and this time hold the whammy all the way down for three seconds.

This makes sure that GPV knows what the whammy positions are so we can whammy effectively and not just whammy automatically simply because the whammy itself is different.

Tilting is detected by GPV as RS Vertical, because of this our Whammy.png mapped to a right stick would fly about if we tilt, but can be disabled. 

At this point we just re-map to show effectively with a button that we are whammying. Someone else can probably cook up a nice whammy efffect mapped to the stick if they are up for it, just remember to fix axis, etc. I don't know enough to make that happen right now.

Here's my pre-generated URL with the mapping, just stick it in OBS.

https://gamepadviewer.com/?p=1&css=https%3A%2F%2Fexemplaryme.github.io%2FGPV_Skins%2Fguitarskin%2Fguitarskin.css&map=%7B%22mapping%22%3A%5B%7B%22targetType%22%3A%22buttons%22%2C%22target%22%3A%225%22%2C%22disabled%22%3Afalse%2C%22axesConfig%22%3A%7B%22type%22%3A%22trigger%22%2C%22lowValue%22%3A%22-0.7999542355537415%22%2C%22highValue%22%3A%221%22%7D%2C%22choiceOperand%22%3A%22-%22%2C%22choiceType%22%3A%22axes%22%2C%22choice%22%3A%222%22%7D%2C%7B%22targetType%22%3A%22axes%22%2C%22target%22%3A%222%22%2C%22disabled%22%3Atrue%7D%5D%7D

 */